--languages=+tex

--langdef=haskell
--langmap=haskell:.hs
--regex-haskell=/^module[ \t]*([A-Z][a-zA-Z0-9'_.]*)/\1/m,module/
--regex-haskell=/^(new)?type[ \t]*([A-Z][a-zA-Z0-9'_]*)./\2/t,type/
--regex-haskell=/^class[ \t]*([A-Z][a-zA-Z0-9'_]*)/\1/c,class/
--regex-haskell=/^data[ \t]*([A-Z][a-zA-Z0-9'_]*)/\1/d,data/
--regex-haskell=/(=|\|)[ \t]+([A-Z][a-zA-Z0-9'_]*)/\2/o,constructor/
--regex-haskell=/^([a-z_][a-zA-Z0-9'_]*).*=/\1/v,function/
--regex-haskell=/[ \t]+([a-z][a-zA-Z0-9'_]*)[ \t]+::[ \t]/\1/a,accessor/

--langdef=Rust
--langmap=Rust:.rs
--regex-Rust=/^[ \t]*(#\[[^\]]\][ \t]*)*(pub[ \t]+)?(extern[ \t]+)?("[^"]+"[ \t]+)?(unsafe[ \t]+)?fn[ \t]+([a-zA-Z0-9_]+)/\6/f,functions,function definitions/
--regex-Rust=/^[ \t]*(pub[ \t]+)?type[ \t]+([a-zA-Z0-9_]+)/\2/T,types,type definitions/
--regex-Rust=/^[ \t]*(pub[ \t]+)?enum[ \t]+([a-zA-Z0-9_]+)/\2/g,enum,enumeration names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?struct[ \t]+([a-zA-Z0-9_]+)/\2/s,structure names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?mod[ \t]+([a-zA-Z0-9_]+)/\2/m,modules,module names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?static[ \t]+([a-zA-Z0-9_]+)/\2/c,consts,static constants/
--regex-Rust=/^[ \t]*(pub[ \t]+)?trait[ \t]+([a-zA-Z0-9_]+)/\2/t,traits,traits/
--regex-Rust=/^[ \t]*(pub[ \t]+)?impl([ \t\n]*<[^>]*>)?[ \t]+(([a-zA-Z0-9_:]+)[ \t]*(<[^>]*>)?[ \t]+(for)[ \t]+)?([a-zA-Z0-9_]+)/\4 \6 \7/i,impls,trait implementations/
--regex-Rust=/^[ \t]*macro_rules![ \t]+([a-zA-Z0-9_]+)/\1/d,macros,macro definitions/

--langmap=lisp:+.clj
--langdef=scala
--langmap=scala:.scala
--regex-scala=/^[[:space:]]*(final|sealed|abstract|private|public|[[:space:]])*class[[:space:]]+([a-zA-Z0-9_]+)/\2/c,classes/
--regex-scala=/^[[:space:]]*(final|sealed|public|private|[[:space:]])*trait[[:space:]]+([a-zA-Z0-9_]+)/\2/t,traits/
--regex-scala=/^[[:space:]]*type[[:space:]]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[[:space:]]*(override|private|protected|implicit|lazy|[[:space:]])*def[[:space:]]+([a-zA-Z0-9_]+)/\2/m,methods/
--regex-scala=/^[[:space:]]*(override|private|protected|implicit|lazy|[[:space:]])*val[[:space:]]+([a-zA-Z0-9_]+)/\2/C,values/
--regex-scala=/^[[:space:]]*(override|private|protected|implicit|[[:space:]])*var[[:space:]]+([a-zA-Z0-9_]+)/\2/l,variables/
--regex-scala=/^[[:space:]]*package[[:space:]]+([a-zA-Z0-9_.]+)/\1/p,packages/
--regex-scala=/^[[:space:]]*(final|sealed|private|public|[[:space:]])*case class[[:space:]]+([a-zA-Z0-9_]+)/\2/c,case classes/
--regex-scala=/^[[:space:]]*(private|public|[[:space:]])*object[[:space:]]+([a-zA-Z0-9_]+)/\2/o,objects/
--regex-scala=/^[[:space:]]*(final|private|public|[[:space:]])*case object[[:space:]]+([a-zA-Z0-9_]+)/\2/o,case objects/
--regex-scala=/^[[:space:]]*import[[:space:]]+([a-zA-Z0-9_{}.,[:space:]=>]+$)/\1/i,imports/

--langdef=prolog
--langmap=prolog:.pl
--regex-prolog=/^([a-z0-9_]+)/\1/p,predicate,predicate definition/
--regex-prolog=/^:-[ \t]+(dynamic|multifile|thread_local)[ \t]+([a-z0-9_]+)/\2/p,predicate,predicate metadata/

--fields=+l
